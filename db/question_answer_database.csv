all?,passes each element in a collection to a block and returns true if the block never evaluates to false or nil.


any?,passes each element in a collection to a block and returns true if any ever evaluates to true.


chunk,runs through elements and groups them if they have the same return value. If it encounters a different return value, starts a new group.


collect,takes a block and returns a new array with the result of running each element through that block once.


collect_concat/flat_map, take a block and returns a new array with the concatenated(combined into one) results of running each element through that block once.


count,returns the number of items in enum, if an argument is passed, returns the number of items that are the same as the argument. If a block is passed, will return the number of items that return true.


cycle,Calls block for each element of enum repeatedly n times or forever if none or nil is given. If a non-positive number is given or the collection is empty, does nothing. Returns nil if the loop has finished without getting interrupted.


detect,Passes each entry in enum to block. Returns the first for which block is not false. If no object matches, calls ifnone and returns its result when it is specified, or returns nil otherwise.


drop,Drops first n elements from enum, and returns rest elements in an array.


drop_while,Drops elements up to, but not including, the first element for which the block returns nil or false and returns an array containing the remaining elements.


each_cons,Iterates the given bloIterates the given block for each element with an arbitrary object given, and returns the initially given object.ck for each array of consecutive <n> elements. If no block is given, returns an enumerator.


each_enReturns an array containing the items in enumtry,Calls block once for each element in self, passing that element as a parameter, converting multiple values from yield to an array.


each_slice,Iterates the given block for each slice of <n> elements. If no block is given, returns an enumerator.


each_with_index,Calls block with two arguments, the item and its index, for each item in enum. Given arguments are passed through to each().


each_with_object,Iterates the given block for each element with an arbitrary object given, and returns the initially given object.	


entries,Returns an array containing the items in enum


find,Passes each entry in enum to block. Returns the first for which block is not false. If no object matches, calls ifnone and returns its result when it is specified, or returns nil otherwise.


find_all,Returns an array containing all elements of enum for which the given block returns a true value.


find_index,Compares each entry in enum with value or passes to block. Returns the index for the first for which the evaluated value is non-false. If no object matches, returns nil


first,Returns the first element, or the first n elements, of the enumerable. If the enumerable is empty, the first form returns nil, and the second form returns an empty array.


flat_map,Returns a new array with the concatenated results of running block once for every element in enum.


grep,Returns an array of every element in enum for which Pattern === element. If the optional block is supplied, each matching element is passed to it, and the blockâ€™s result is stored in the output array.


group_by,Groups the collection by result of the block. Returns a hash where the keys are the evaluated result from the block and the values are arrays of elements in the collection that correspond to the key.


include?,Returns true if any member of enum equals obj. Equality is tested using ==.


inject,Combines all elements of enum by applying a binary operation, specified by a block or a symbol that names a method or operator. If you specify a block, then for each element in enum the block is passed an accumulator value (memo) and the element. If you specify a symbol instead, then each element in the collection will be passed to the named method of memo. In either case, the result becomes the new value for memo. At the end of the iteration, the final value of memo is the return value for the method. If you do not explicitly specify an initial value for memo, then the first element of collection is used as the initial value of memo.


lazy, Returns a lazy enumerator, whose methods map/collect, flat_map/collect_concat, select/find_all, reject, grep, zip, take, #take_while, drop, and #drop_while enumerate values only on an as-needed basis. However, if a block is given to zip, values are enumerated immediately.


map,Returns a new array with the results of running block once for every element in enum.


max,Returns the object in enum with the maximum value. The first form assumes all objects implement Comparable; the second uses the block to return a <=> b.


max_by,Returns the object in enum that gives the maximum value from the given block. If the n argument is given, minimum n elements are returned as an array.


member?,Returns true if any member of enum equals obj. Equality is tested using ==.


min,Returns the object in enum with the minimum value. The first form assumes all objects implement Comparable; the second uses the block to return a <=> b.If the n argument is given, minimum n elements are returned as an array.


min_by,Returns the object in enum that gives the minimum value from the given block.If the n argument is given, minimum n elements are returned as an array.


minmax,Returns two elements array which contains the minimum and the maximum value in the enumerable. The first form assumes all objects implement Comparable; the second uses the block to return a <=> b.


minmax_by,Returns a two element array containing the objects in enum that correspond to the minimum and maximum values respectively from the given block.


none?,Passes each element of the collection to the given block. The method returns true if the block never returns true for all elements. If the block is not given, none? will return true only if none of the collection members is true.


one?,Passes each element of the collection to the given block. The method returns true if the block returns true exactly once. If the block is not given, one? will return true only if exactly one of the collection members is true.


partition,Returns two arrays, the first containing the elements of enum for which the block evaluates to true, the second containing the rest.


reduce,Combines all elements of enum by applying a binary operation, specified by a block or a symbol that names a method or operator. If you specify a block, then for each element in enum the block is passed an accumulator value (memo) and the element. If you specify a symbol instead, then each element in the collection will be passed to the named method of memo. In either case, the result becomes the new value for memo. At the end of the iteration, the final value of memo is the return value for the method. If you do not explicitly specify an initial value for memo, then the first element of collection is used as the initial value of memo.


reject,Returns an array for all elements of enum for which the given block returns false.


reverse_each,Builds a temporary array and traverses that array in reverse order.


select,Returns an array containing all elements of enum for which the given block returns a true value.


slice_after,Creates an enumerator for each chunked elements. The ends of chunks are defined by pattern and the block. If pattern === elt returns true or the block returns true for the element, the element is end of a chunk. The === and block is called from the first element to the last element of enum. The result enumerator yields the chunked elements as an array. 


slice_before,Creates an enumerator for each chunked elements. The beginnings of chunks are defined by pattern and the block. If pattern === elt returns true or the block returns true for the element, the element is beginning of a chunk. The === and block is called from the first element to the last element of enum. The result for the first element is ignored.


slice_when,Creates an enumerator for each chunked elements. The beginnings of chunks are defined by the block. This method split each chunk using adjacent elements, elt_before and elt_after, in the receiver enumerator. This method split chunks between elt_before and elt_after where the block returns true. The block is called the length of the receiver enumerator minus one.


sort,Returns an array containing the items in enum sorted, either according to their own <=> method, or by using the results of the supplied block. The block should return -1, 0, or +1 depending on the comparison between a and b. As of Ruby 1.8, the method Enumerable#sort_by implements a built-in Schwartzian Transform, useful when key computation or comparison is expensive.


sort_by,Sorts enum using a set of keys generated by mapping the values in enum through the given block.


take,Returns first n elements from enum.


take_while,Passes elements to the block until the block returns nil or false, then stops iterating and returns an array of all prior elements.


to_a,Returns an array containing the items in enum.


to_h,Returns the result of interpreting enum as a list of [key, value] pairs.


zip,Takes one element from enum and merges corresponding elements from each args. This generates a sequence of n-element arrays, where n is one more than the count of arguments. The length of the resulting sequence will be enum#size. If the size of any argument is less than enum#size, nil values are supplied. If a block is given, it is invoked for each output array, otherwise an array of arrays is returned.
